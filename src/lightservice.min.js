//lightservice 5.0.0
//Samuel B
var light = "undefined" == typeof light ? function () { function e(e) { return "[object Array]" === Object.prototype.toString.call(e) } var n = {}; n.getCurrentContext = function (e, t) { var r = { event: n.systemServices, service: S(), arg: t, system: n.system, state: n._STATE_[e].method() }; return r }, n.forbiddenNames = { result: !0, service: !0, handle: !0 }, n.expectNoForbiddenName = function (e) { if (n.forbiddenNames[e]) throw "You cannot use the name '" + e + "'" }, n.registry = { service: {}, handle: {}, scripts: {} }, n.isRegistered = function (e) { return n.registry.service[e] || n.registry.handle[e] ? !0 : !1 }, n.generateUniqueSystemName = function (e) { e = e || ""; var t = (e + "_xxxxxxxx_xxxx_4xxx_yxxx_xxxxxxxxxxxx").replace(/[xy]/g, function (e) { var n = 16 * Math.random() | 0, t = "x" == e ? n : 3 & n | 8; return t.toString(16) }); return n.isRegistered(t) ? n.generateUniqueSystemName(e) : t }, n.stateFactory = function (e) { n._STATE_[e] = { state: {}, ref: {}, method: function () { var t = function (t, r) { n._STATE_[e].ref[t] = { data: r }, n._STATE_[e].state[t] = JSON.stringify(n._STATE_[e].ref[t]) }; return { get: function (t) { var r = n._STATE_[e].state[t]; return r ? JSON.parse(r).data : r }, set: function (e, n) { t(e, n) }, getRef: function (t) { return n._STATE_[e].ref[t] = n._STATE_[e].ref[t] || {}, n._STATE_[e].ref[t].data } } } } }, n.burnThread = function (e) { for (var n = (new Date).getTime() + 1e3 * e; (new Date).getTime() <= n;); }, n.loadScript = function (e, t) { t ? n.loadScriptAsync(e, t) : n.loadScriptSync(e) }, n.loadScriptAsync = function (e, n) { if (!document) throw "Cannot load script : no document"; var t = document.createElement("script"); t.src = e, t.onload = "function" == typeof n ? n : function () { }, document.getElementsByTagName("head")[0].appendChild(t) }, n.loadScriptSync = function (e) { if (!document) throw "Cannot load script : no document"; var n = r(); n.open("GET", e, !1), n.send(""); var t = document.createElement("script"); t.type = "text/javascript", t.text = n.responseText, document.getElementsByTagName("head")[0].appendChild(t) }, n.track = { record: function (e) { if (n.track.records = n.track.records || [], n.recordServices && e.methodName !== n.DEFAULT_HANDLE_NAME) { var t = { dataType: e.entranceOrExit, methodType: e.serviceOrHandleMethodName, methodName: e.methodName, time: Date.now ? Date.now() : (new Date).getTime(), position: n.track.records.length, isFirst: e.isFirstCallInServiceRun, isLast: e.isLastCallInServiceRun, data: e.argumentOrReturnData, isTest: e.isTest || !1, info: e.info, infoType: e.infoType, link: "function" == typeof e.link ? e.link.toString() : e.link }; n.track.records.push(JSON.parse(JSON.stringify(t))) } }, clearAllRecords: function () { n.track.records = [] } }, n.system = { getRecord: function (e) { return n.track.records = n.track.records || [], n.track.records[e] || [] }, getLastRecord: function () { return n.track.records = n.track.records || [], n.track.records.length ? n.track.records[n.track.records.length - 1] : [] }, play: function (e, t) { var r = this; e = e || 0, t = t || n.track.records.length - 1, h(function (i) { for (var a = i, o = e; t >= o; o++) { var c = r.getRecord(o); if (!c) throw "unable to find service to play service"; c.methodType === n.serviceTag && c.dataType === n.entranceTag && (a = o === e ? a[c.methodName](c.data) : a[c.methodName]()) } a.result() }) }, getAllRecords: function (e, t) { e = e || 0; var r = n.track.records.slice(e, t); return r }, recordStart: function () { n.recordServices = !0 }, recordStop: function () { n.recordServices = !1 }, recordClear: function () { n.track.clearAllRecords() } }, n.utility = { execSurpressError: function (e, n, t, r) { if (h.event.notify(n, t, r), "function" == typeof e) try { e(n, t, r) } catch (i) { console.error("SUPRESSED ERROR : " + i) } }, tryCatch: function (e, t, r, i) { try { var a = t(); n.utility.execSurpressError(function () { r(a, e) }, null, e, "trying-service") } catch (o) { n.utility.execSurpressError(function () { i(o, e) }, o, e, "service-throws") } } }; var t = [function () { return new XMLHttpRequest }, function () { return new ActiveXObject("Msxml2.XMLHTTP") }, function () { return new ActiveXObject("Msxml3.XMLHTTP") }, function () { return new ActiveXObject("Microsoft.XMLHTTP") }], r = function () { for (var e = !1, n = 0; n < t.length; n++) { try { e = t[n]() } catch (r) { continue } break } return e }, i = function (e, t, r) { return i.ref = i.ref || 0, i.ref++, n.eventSubscribers[t] = n.eventSubscribers[t] || {}, n.eventSubscribers[t].sub = n.eventSubscribers[t].sub || [], n.eventSubscribers[t].sub.push({ service: r, ref: i.ref }), i.ref }, a = function (e, t, r) { n.eventSubscribers[t] = n.eventSubscribers[t] || {}, n.eventSubscribers[t].sub = n.eventSubscribers[t].sub || [], n.eventSubscribers[t].notify = n.eventSubscribers[t].notify || function (e, i, a) { for (var o = t, c = n.eventSubscribers[o].sub.length, s = 0; c > s; s++) { var u = n.eventSubscribers[o].sub[s], f = { index: s, notificationType: a }; r(u, e, i, f) } } }, o = function (e, t) { return a(e, t, function (e, t, r, i) { n.utility.tryCatch(r, function () { return e.service() }, function () { }, function () { n.utility.execSurpressError(e.service.error, t, r, i) }) }) }, c = function (e, n, t) { n[e] = function (n) { i(e, t, n) }, a(e, t, function (e, n, t, r) { if ("function" == typeof e) try { e(n, t, r) } catch (i) { } }) }, s = function (e, t, r) { c(t, e, r + "." + t), e[t].notify = n.eventSubscribers[r + "." + t].notify }, u = function (e, t, r) { var a = r + "." + t; e[t] = function (e) { return i(r, a, e) }, e[t].forEachSubscriber = e[t].forEachSubscriber || function (e) { for (var t = n.eventSubscribers[a].sub.length, r = 0; t > r; r++) { var i = n.eventSubscribers[a].sub[r]; e && e(i) } }, o(r, a), e[t].notify = n.eventSubscribers[a].notify }, f = function (e, t, r, i, a) { var o = n._TEST_OBJECTS_ && n._TEST_OBJECTS_[i] && n._TEST_OBJECTS_[i].handleName, c = n._TEST_OBJECTS_ && n._TEST_OBJECTS_[i] && n._TEST_OBJECTS_[i].handle; return n.track.record({ entranceOrExit: n.entranceTag, serviceOrHandleMethodName: n.handleTag, methodName: o, argumentOrReturnData: i, info: a, infoType: n.serviceArgTag, isTest: !0, isFirstCallInServiceRun: n.unknownTag, isLastCallInServiceRun: n.unknownTag, link: c }), tmpDefinition = c.call(n.getCurrentContext(i, r), r), n.track.record({ entranceOrExit: n.exitTag, serviceOrHandleMethodName: n.handleTag, methodName: o, argumentOrReturnData: i, info: n.unknownTag, infoType: n.unknownTag, isTest: !0, isFirstCallInServiceRun: n.unknownTag, isLastCallInServiceRun: n.unknownTag, link: c }), tmpDefinition }, l = function (e, t, r, i, a, o, c, s) { s && (r = s); for (var u = !1, f = n.handles.length, l = 0; f > l; l++) { var d = n.handles[l]; if (u = r && d.name === r) { n.track.record({ entranceOrExit: n.entranceTag, serviceOrHandleMethodName: n.handleTag, methodName: r, argumentOrReturnData: a, info: o, infoType: n.serviceArgTag, isTest: !1, isFirstCallInServiceRun: n.unknownTag, isLastCallInServiceRun: n.unknownTag, link: c || d.definition }), tmpDefinition = (c || d.definition).call(n.getCurrentContext(r, i), i), n.track.record({ entranceOrExit: n.exitTag, serviceOrHandleMethodName: n.handleTag, methodName: r, argumentOrReturnData: a, info: n.unknownTag, infoType: n.unknownTag, isTest: !1, isFirstCallInServiceRun: n.unknownTag, isLastCallInServiceRun: n.unknownTag, link: c || d.definition }); break } } return tmpDefinition }, d = function (e, t, r, i, a, o) { var c, s = n._TEST_OBJECTS_ && n._TEST_OBJECTS_[a] && n._TEST_OBJECTS_[a].handleName, u = n._TEST_OBJECTS_ && n._TEST_OBJECTS_[a] && n._TEST_OBJECTS_[a].handle; return c = u && !s ? f(e, t, i, a, o) : l(e, t, r, i, a, o, u, s) }, T = function (t, r, i, a, o, c) { n._TEST_OBJECTS_ && n._TEST_OBJECTS_[o] && n._TEST_OBJECTS_[o].service && (i = n._TEST_OBJECTS_[o].handleNames || i, a = n._TEST_OBJECTS_[o].service || a), i = e(i) ? i : i ? [i] : []; var s, u = i.length; s = c; for (var f = 0; u > f; f++) { var l = i[f], T = d(t, r, l, a, o, s); if ("function" != typeof T) { var v = "Cannot process service or handle '" + o + "' "; throw v += T ? "'" + l + "' service handle must return a function" : "no matching service handle  exists ", console.error(v), v } s = T.call(n.getCurrentContext(o, s), s) } return s }, v = function (e, t, r, i, a) { return u(t, "before", a), u(t, "after", a), u(t, "error", a), u(t, "success", a), function (o, c) { var s = {}; s.arg = o; var u; return e.callerContext = c, n.utility.tryCatch(e, function () { return t.before.notify() }, function (e) { }, function (e) { }), n.utility.tryCatch(e, function () { return n.track.record({ entranceOrExit: n.entranceTag, serviceOrHandleMethodName: n.serviceTag, methodName: a, argumentOrReturnData: s.arg, info: r, infoType: n.handleTag, isTest: !1, isFirstCallInServiceRun: n.unknownTag, isLastCallInServiceRun: n.unknownTag, link: i }), u = T(e, t, r, i, a, s.arg), n.track.record({ entranceOrExit: n.exitTag, serviceOrHandleMethodName: n.serviceTag, methodName: a, argumentOrReturnData: u, info: r, infoType: n.handleTag, isTest: !1, isFirstCallInServiceRun: n.unknownTag, isLastCallInServiceRun: n.unknownTag, link: i }), u }, function (n) { return t.success.notify(n, e, "service-success") }, function (r) { return n.track.record({ entranceOrExit: n.exitTag, serviceOrHandleMethodName: n.serviceTag, methodName: a, argumentOrReturnData: r, info: "event:error", infoType: n.eventTag, isTest: !1, isFirstCallInServiceRun: n.unknownTag, isLastCallInServiceRun: n.unknownTag, link: i }), t.error.notify(r, e, "service-error") }), n.utility.tryCatch(e, function () { return t.after.notify() }, function () { }, function () { }), u } }, m = function (t, r, i) { var a = "service_"; if (0 == arguments.length || arguments.length > 3) throw "Cannot create service : problem with service definition"; if (1 == arguments.length) { if ("function" != typeof t) return n.registry.scripts[t] ? { load: function (e) { e && h(e) } } : (n.registry.scripts[t] = !0, { load: function (e) { n.loadScript(t, e && function () { h(e) }) } }); i = t, t = n.generateUniqueSystemName(a), r = n.DEFAULT_HANDLE_NAME } if (2 == arguments.length) { if ("function" != typeof r) throw "service definition has to be a function"; i = r, e(t) ? (r = t, t = n.generateUniqueSystemName(a)) : r = n.DEFAULT_HANDLE_NAME } if (n.isRegistered(t)) throw "Unable to create service with name '" + t + "'.Name already exists in registry"; n.expectNoForbiddenName(t); var o = i, c = { name: t, step: function (e) { h.event.notify(t, c, "service-call"), this.steps.push(e) }, steps: [] }, s = function (e) { return s.redefinition(e) }; return s.redefinition = v(c, s, r, o, t), s.me = t, n.systemServices[t] = s, n.registry.service[t] = {}, n.stateFactory(t), t }, g = function (e, n, t) { for (var r in e) n(r); t() }, S = function (e) { S.totalChain = S.totalChain || 0; var t = {}, r = void 0; t.result = function () { var e = r; return r = void 0, e }; var i = function (e) { t[e] = function (e) { return function (i) { var a = {}; a.previousOrMostCurrentResultToBePassedToTheNextActor = arguments.length ? i : r; var o = JSON.parse(JSON.stringify(a)).previousOrMostCurrentResultToBePassedToTheNextActor; return r = n.systemServices[e](o), t } }(e) }; if (e) g(n.systemServices, i, function () { e(t) }); else for (var a in n.systemServices) i(a); return t.merge = function (e) { var n; if (r) for (var i in r) n = n || {}, n[i] = r[i]; if (e) for (var i in e) n = n || {}, n[i] = e[i]; return r = n, t }, t }, h = function (e) { S(function (t) { "function" == typeof e && e.call(n.getCurrentContext(n._GLOBAL_SCOPE_NAME, t), t) }) }; h.startService = function (e) { h(e) }, h.handle = function (e, t) { var r = "handle_"; if (0 == arguments.length || arguments.length > 2) throw "Cannot create handle : problem with handle definition"; if (1 == arguments.length) { if ("function" != typeof e) throw "handle definition has to be a function"; t = e, e = n.generateUniqueSystemName(r) } if (n.isRegistered(e)) throw "Unable to create handle with name '" + e + "'.Name already exists in registry"; return n.expectNoForbiddenName(e), n.registry.handle[e] = {}, n.handles.push({ name: e, definition: t }), n.stateFactory(e), e }, h.advance = { serviceTest: function (e, t) { n._TEST_OBJECTS_ = e, t.call(n.getCurrentContext(n._GLOBAL_SCOPE_NAME, S()), S()), n._TEST_OBJECTS_ = void 0 } }, "undefined" == typeof Immutable ? h.Immutable = { Map: function (e) { var t = n.generateUniqueSystemName("immu"), r = { data: e }; return n.ImmutableStore[t] = JSON.stringify(r), { get: function (e) { var r = JSON.parse(n.ImmutableStore[t]); return r.data[e] }, set: function (e, r) { var i = JSON.parse(n.ImmutableStore[t]); i.data[e] = r; var a = JSON.parse(JSON.stringify(i)).data; return h.Immutable.Map(a) } } } } : h.Immutable = Immutable, h.copy = function (e) { h.Immutable.Map({ data: e }).get("data") }; var _ = function () { h.version = 1, h.service = m, n.entranceTag = "argument", n.exitTag = "result", n.serviceTag = "service", n.handleTag = "handle", n.eventTag = "event", n.unknownTag = "unknown", n._TEST_OBJECTS_ = {}, n.systemServices = {}, n.ImmutableStore = {}, n._STATE_ = {}, n.eventSubscribers = {}, n.handles = [], n._GLOBAL_SCOPE_NAME = n.generateUniqueSystemName("_GLOBAL_SCOPE_"), n.stateFactory(n._GLOBAL_SCOPE_NAME), n.DEFAULT_HANDLE_NAME = n.generateUniqueSystemName("defHandle"), s(h, "event", "$system"), h.handle(n.DEFAULT_HANDLE_NAME, function (e) { return e }) }; return _(), h }() : console.log("light script already exists"); "undefined" != typeof module && "exports" in module && (module.exports = light), "function" == typeof define && define.amd && define("light", [], function () { return light });